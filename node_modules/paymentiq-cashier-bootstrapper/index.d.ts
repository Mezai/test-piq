/*
  This file contains the publicly exported types.
  This package exports a default _PaymentIQCashier and an exported interface IPiqCashierApiMethods

  The projects default types.ts file imports the types and interfaces from this file.
  This file is manually curated - i.e not built automatically. We only need to expose the types we want to
*/

export interface User {
  [key: string]: string | number | boolean
}

export interface Attributes {
  hostUri?: string,
  didToken?: string,
  [key: string]: string | number |Â boolean | undefined
}

// arbitrary object
export interface Theme {
  input?: {
    color?: string,
    fontSize?: string,
    height?: string,
    borderRadius?: string
  },
  inputbackground?: {
    color?: string
  },
  labels?: {
    color?: string,
    fontSize?: string
  },
  headings?: {
    color?: string,
    fontSize?: string
  },
  loader?: {
    color?: string,
  },
  error?: {
    color?: string
  },
  success?: {
    color?: string
  },
  buttons?: {
    color?: string,
  },
  headerbackground?: {
    color?: string,
  },
  background?: {
    color?: string,
  },
  cashierbackground?: {
    color?: string,
  },
  border?: {
    radius?: string,
  },
  margin?: {
    size?: string,
  },
  providerlogos?: {
    list?: string,
    dropdown?: string
  },
  creditcardicons?: {
    creditcardUrl?: string,
    cvvUrl?: string,
    expirydateUrl?: string
  }
}

type BooleanOrBooleanString = boolean | 'true' | 'false'
type StringOrNumber = string | number
export type Environment = 'production' | 'mrgreen' | 'casumo' | 'test' | 'development'
type Method = 'deposit' | 'withdrawal'
type Mode = 'gambling' | 'ecommerce'
type ShowAccounts = 'list-first' | 'list-with-pm' | 'inline' | false | 'false'
type ShowReceipt = BooleanOrBooleanString | 'only'
type ReceiptAmountDisplayStyle = 'symbol' | 'ISO-3'
type ReceiptAmountTransactionStyle = 'TxAmount' | 'Amount'
type Layout = 'vertical' | 'horizontal'
type ScrollToPm = 'nearest' | null | 'center' | 'start' | 'end'
type ListType = 'list' | 'grid'
type TrackingEvent = 'allDeposits' | 'firstDeposit' | 'allWithdrawals'
type DisplayLogoOrName = 'both' | 'logo' | 'name'

interface UserData {
  email?: string,
  firstName?: string,
  lastName?: string,
  address?: string,
  city?: string,
  postalCode?: string
}

export interface LookupConfig {
  environment?: Environment
  merchantId?: string
  user?: User
  attributes?: Attributes
  theme?: Theme
  hostUri: string
  domElement?: HTMLElement
  containerHeight?: string
  containerWidth?: string
  containerMinHeight?: string,
  version?: string,
  didAccessToken?: null|{ lastUsed: string, token: string }|string,
  userData?: null|UserData|string
}

interface TrackingPixel {
  type: TrackingEvent,
  scriptSrc?: string,
  scriptAttrs?: string,
  trackingName: string,
  imgSrc: string,
  imgAttrs?: string 
}

interface TrackingScript {
  event: TrackingEvent,
  src: string,
  attrs?: string
}

export interface CashierConfig {
  merchantId: string
  userId?: string
  sessionId?: string
  environment?: Environment
  method?: Method
  mode?: Mode
  locale?: string
  gaTag?: string
  hotjarTag?: string
  country?: string
  attributes?: Attributes
  user?: User
  theme?: Theme
  lookupConfig?: LookupConfig
  selectlastusedtxmethod?: BooleanOrBooleanString
  providerType?: string
  autoProcess?: BooleanOrBooleanString
  storeAccount?: BooleanOrBooleanString
  saveAccountOption?: BooleanOrBooleanString
  showAccounts?: ShowAccounts
  accountDelete?: BooleanOrBooleanString
  amount?: StringOrNumber
  singlePageFlow?: BooleanOrBooleanString
  showAmountLimits?: BooleanOrBooleanString
  scrollToOffset?: number,
  showTransactionOverview?: BooleanOrBooleanString
  predefinedValues?: BooleanOrBooleanString
  predefinedAmounts?: number[]
  showReceipt?: ShowReceipt
  showHeader?: BooleanOrBooleanString
  showFooter?: BooleanOrBooleanString
  tabs?: BooleanOrBooleanString
  containerHeight?: StringOrNumber
  containerMinHeight?: StringOrNumber
  containerWidth?: string
  bonusCode?: string
  showBonusCode?: BooleanOrBooleanString
  channelId?: string
  logoUrl?: string
  logoSize?: number
  listRadio?: BooleanOrBooleanString
  amountFirst?: BooleanOrBooleanString
  receiptAmountDisplayStyle?: ReceiptAmountDisplayStyle
  receiptAmountTransactionStyle?: ReceiptAmountTransactionStyle
  receiptExcludeKeys?: string[]
  layout?: Layout
  logoFullWidth?: BooleanOrBooleanString
  accountId?: string
  autoOpenFirstPaymentMethod?: BooleanOrBooleanString
  scrollToPm?: ScrollToPm
  globalSubmit?: BooleanOrBooleanString
  showTermsConditions?: BooleanOrBooleanString
  allowCancelPendingWithdrawal?: BooleanOrBooleanString
  showListHeaders?: BooleanOrBooleanString
  listType?: ListType
  displayLogoOrName?: DisplayLogoOrName
  pollLimit?: number
  history?: BooleanOrBooleanString
  defaultLoader: BooleanOrBooleanString,
  errorMsgTxRefId?: BooleanOrBooleanString
  showFee?: BooleanOrBooleanString | Method
  disableBtnAtZero?: BooleanOrBooleanString
  pmListLimit?: number
  alwaysShowSubmitBtn?: BooleanOrBooleanString
  showTransactionsOnly?: BooleanOrBooleanString
  font?: string
  trackingPixels?: TrackingPixel[]
  trackingScripts?: TrackingScript[]
  hideTxOverview?: BooleanOrBooleanString
  allowMobilePopup?: BooleanOrBooleanString
  fetchConfig?: BooleanOrBooleanString
  blockBrowserNavigation?: BooleanOrBooleanString
  showAmount?: BooleanOrBooleanString
  receiptBackBtn?: BooleanOrBooleanString
  pendingTxHeader?: BooleanOrBooleanString
  dropdownTabs?: BooleanOrBooleanString
  pendingTab?: BooleanOrBooleanString
  showtermsAndConditionsTemplate?: BooleanOrBooleanString
  customLogoFileName?: string,
  autoSetIframeProviderHeight?: BooleanOrBooleanString
  newPaymentBtn?: BooleanOrBooleanString
  initLoadErrorTimeout?: number
  showCookiesWarning?: BooleanOrBooleanString
  checkWithdrawalBalance?: BooleanOrBooleanString
  lastUsedDepositAmount?: BooleanOrBooleanString
  historyDateOptions?: BooleanOrBooleanString
  showBackAtInitPath?: BooleanOrBooleanString
  allowWindowClose?: string
  enableTermsTemplateFor?: string,
  fixedProviderType?: BooleanOrBooleanString
  hardClose?: BooleanOrBooleanString,
  gtm?: string|string[],
  prefillCreditcardHolder?: boolean,
}

// We used to prefix with 'I', keep this if it's being used
export interface IPiqCashierConfig extends CashierConfig {}

export interface HostCallbackType {
  cashierInitLoad?: () => void
  lookupInitLoad?: () => void
  change?: (data?: any) => void
  pause?: (data?: any) => void
  resume?: (data?: any) => void
  isVisible?: () => void
  isHidden?: () => void
  update?: (data?: any) => void
  success?: (data?: any) => void
  failure?: (data?: any) => void
  pending?: (data?: any) => void
  unresolved?: (data?: any) => void
  isLoading?: (data?: any) => void
  doneLoading?: (data?: any) => void
  newProviderWindow?: (data?: any) => void
  paymentMethodSelect?: (data?: any) => void
  paymentMethodPageEntered?: (data?: any) => void
  navigate?: (data?: any) => void
  cancelledPendingWD?: (data?: any) => void
  validationFailed?: (data?: any) => void,
  onLoadError?: (data?: any) => void
  cancelled?: (data?: any) => void
  lookupUserIdentified?: (data?: any) => void
  transactionInit?: (data?: any) => void,
  lookupUserData?: (data?: any) => void
}

// export interface ApiMethodsType {
export interface IPiqCashierApiMethods {
  set: (data: IPiqCashierConfig) => void
  css: (css: string) => void
  pause: () => void
  resume: () => void
  on: (callbacks: HostCallbackType) => void
}

export type CashierCallback = (API: IPiqCashierApiMethods) => void

/*
  Only need to expose the class base parameters
  We also export the IPiqCashierApiMethods from the index.ts
*/
declare class _PaymentIQCashier {
  constructor(el: string, cashierConfig: IPiqCashierConfig, callback?: CashierCallback)
}


export default _PaymentIQCashier
